name: speech_recognizer
version: v7.4.3
description: 基于 RVB2601 的云语音识别
type: solution
hw_info:
  cpu_id: ""
  cpu_name: ""
  vendor_name: ""
  chip_name: ""
  board_name: ch2601_evb
  ld_script: configs/gcc_flash.ld
  flash_program: ""
# cpu_id: cpu0
# board_name: board_dummy
# toolchain_prefix: csky-abiv2-elf
# cpu_name: CK805EF
# vendor_name: thead
# chip_name: 'chip_ch2201'
depends:
  - at: v7.4.3
  - av: v7.4.4
  - drv_wifi_at_w800: v7.4.3
  - httpclient: v1.0.0
  - mbedtls: v7.4.3
  - sdk_chip_ch2601: v7.4.3
  - transport: v1.0.0
## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: t-head
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   board_name: pangu_cpu0_evb             # <可选项> 指定开发板组件名，未设置时，使用depends中 board 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
## solution component
# hw_info:
#   cpu_id: cpu0
#   board_name: pangu_cpu0_evb
#   cpu_name: CK805EF
#   vendor_name: thead
#   chip_name: 'chip_pangu'
#   ld_script: configs/gcc_eflash.ld.S
# hw_info:
#   cpu_id: cpu0
#   board_name: ch2601_evb
## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  include:
    - app/include
  internal_include: 
  cflag: -Os  -mno-ldr -mno-ext -mno-mula -mno-srri -mno-ldi -mno-addsl -mno-ldd -mno-rev -mno-condmv
  cxxflag: -Os  -mno-ldr -mno-ext -mno-mula -mno-srri -mno-ldi -mno-addsl -mno-ldd -mno-rev -mno-condmv
  asmflag: ""
  define: 
  libs:
    - m
  libpath: 
  ldflag: -Wl,-Map="yoc.map" -Wl,-zmax-page-size=1024
# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - app/src/*.c
## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  CONFIG_AEFXER_IPC: 0
  CONFIG_AEFXER_SONA: 0
  CONFIG_AO_MIXER_SUPPORT: 0
  CONFIG_ARCH_INTERRUPTSTACK: 6144
  CONFIG_AT: 1
  CONFIG_ATEMPOER_IPC: 0
  CONFIG_ATEMPOER_SONIC: 1
  CONFIG_AV_AO_CHANNEL_NUM: 1
  CONFIG_AV_PROBE_SIZE_MAX: 1024
  CONFIG_AV_SAMPLE_NUM_PER_FRAME_MAX: 80
  CONFIG_AV_STREAM_INNER_BUF_SIZE: 256
  CONFIG_CLI: 1
  CONFIG_CPU_E906: 1
  CONFIG_DEBUG: 1
  CONFIG_DECODER_ADPCM_MS: 0
  CONFIG_DECODER_ALAW: 0
  CONFIG_DECODER_AMRNB: 0
  CONFIG_DECODER_AMRWB: 0
  CONFIG_DECODER_FLAC: 0
  CONFIG_DECODER_IPC: 0
  CONFIG_DECODER_MULAW: 0
  CONFIG_DECODER_OPUS: 0
  CONFIG_DECODER_PCM: 1
  CONFIG_DECODER_PVMP3: 1
  CONFIG_DECODER_SPEEX: 0
  CONFIG_DEMUXER_ADTS: 0
  CONFIG_DEMUXER_AMR: 0
  CONFIG_DEMUXER_ASF: 0
  CONFIG_DEMUXER_FLAC: 0
  CONFIG_DEMUXER_MP3: 1
  CONFIG_DEMUXER_MP4: 0
  CONFIG_DEMUXER_OGG: 0
  CONFIG_DEMUXER_RAWAUDIO: 1
  CONFIG_DEMUXER_TS: 0
  CONFIG_DEMUXER_WAV: 0
  CONFIG_EQXER_IPC: 0
  CONFIG_EQXER_SILAN: 0
  CONFIG_FFTXER_IPC: 0
  CONFIG_FFTXER_SPEEX: 0
  CONFIG_KV_SMART: 0
  CONFIG_NETMGR_WIFI: 1
  CONFIG_NON_ADDRESS_FLASH: 1
  CONFIG_NTP: 1
  CONFIG_PARAM_NOT_CHECK: 1
  CONFIG_PLAYER_TASK_STACK_SIZE: 2048
  CONFIG_RESAMPLER_IPC: 0
  CONFIG_RESAMPLER_SPEEX: 0
  CONFIG_SAL_DEFAULT_INPUTMBOX_SIZE: 8
  CONFIG_SEC_CRYPTO_SHA_SW: 1
  CONFIG_SOFTWDT: 1
  CONFIG_STREAMER_CRYPTO: 0
  CONFIG_STREAMER_FIFO: 0
  CONFIG_STREAMER_FILE: 1
  CONFIG_STREAMER_HLS: 0
  CONFIG_STREAMER_HTTP: 1
  CONFIG_STREAMER_MEM: 1
  CONFIG_SUPPORT_TSPEND: 1
  CONFIG_WEB_CACHE_TASK_STACK_SIZE: 2048
  CONFIG_XIP: 1
# CONFIG_USING_TLS: 1
# CONFIG_DEBUG_MM: 1
#sec_crypto
#CONFIG_SEC_CRYPTO_AES_SW: 1
#CONFIG_SEC_CRYPTO_RSA_SW: 1
#CONFIG_SEC_CRYPTO_RNG_SW: 1
## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
export:
  - dest: <SOLUTION_PATH>/generated/data
    source:
      - configs/config.yaml
keywords: 
tag: ""
author:
  name: ""
license: ""
install: 
homepage: 
depends_forward:
  - at: v7.4.3
  - av: v7.4.4
  - drv_wifi_at_w800: v7.4.3
  - httpclient: v1.0.0
  - mbedtls: v7.4.3
  - sdk_chip_ch2601: v7.4.3
  - transport: v1.0.0